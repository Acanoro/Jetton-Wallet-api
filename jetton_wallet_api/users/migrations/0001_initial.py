# Generated by Django 4.2.14 on 2024-07-28 14:36

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telegram_id', models.IntegerField(unique=True, verbose_name='Telegram ID')),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Баланс')),
                ('twitter_account', models.CharField(blank=True, max_length=100, null=True, verbose_name='Twitter аккаунт')),
                ('youtube_account', models.CharField(blank=True, max_length=100, null=True, verbose_name='YouTube аккаунт')),
                ('remaining_invites', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Оставшиеся приглашения')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователь',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AvatarsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название каталога')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
                ('link', models.URLField(verbose_name='Ссылка н аватарку')),
                ('active', models.BooleanField(default=True, verbose_name='доступ')),
            ],
            options={
                'verbose_name': 'Аватарка',
                'verbose_name_plural': 'Аватарка',
            },
        ),
        migrations.CreateModel(
            name='LanguagesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Язык')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
                ('iso_code', models.CharField(max_length=10, unique=True, verbose_name='iso_code')),
                ('active', models.BooleanField(default=True, verbose_name='доступ')),
            ],
            options={
                'verbose_name': 'Язык',
                'verbose_name_plural': 'Язык',
            },
        ),
        migrations.CreateModel(
            name='NameWalletModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название кошелька')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Название кошелька',
                'verbose_name_plural': 'Название кошелька',
            },
        ),
        migrations.CreateModel(
            name='TonWalletModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='Дата добавления')),
                ('related_name_wallet', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nameWallets', to='users.namewalletmodel')),
                ('related_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wallets', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'TonWallet',
                'verbose_name_plural': 'TonWallet',
            },
        ),
        migrations.CreateModel(
            name='ReferralsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(verbose_name='Дата добавления')),
                ('reward_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Сумма бонуса')),
                ('related_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_referrals', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('related_user_referral', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='referrals', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь реферал')),
            ],
            options={
                'verbose_name': 'TonWallet',
                'verbose_name_plural': 'TonWallet',
            },
        ),
        migrations.CreateModel(
            name='ModeratorsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('related_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Модераторы',
                'verbose_name_plural': 'Модераторы',
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='related_avatar',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.avatarsmodel', verbose_name='Аватарка'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='related_languages',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.languagesmodel', verbose_name='Язык'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
